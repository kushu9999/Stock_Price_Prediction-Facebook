# -*- coding: utf-8 -*-
"""Facebook-Stock_price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/146TYyXg7t9DWWj52CPWf2pILaWLF9-re
"""

# Importing Libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import quandl

# Get the stock data
quandl.ApiConfig.api_key = "9hhTSLL8bY4xsx######" # Put your api here i hide because security purposes
dataset = quandl.get("WIKI/FB")
# View Top 5 data
dataset.head()

dataset.shape

"""# Feature Engineering"""

# In this dataset our independent variable is Adj. Close and We Want to predict next days Adj. Close
# So we only take Adj.close Column and all other we don't want
dataset = dataset[['Adj. Close']]

dataset

''' First we will create  a variable for predicting 'n' days out into future'''
forecast_out = 30 # No of days of future prediction
# Creating another column of target variable shifted 'n' units up
dataset['prediction'] = dataset[['Adj. Close']].shift(-forecast_out)

dataset.head()

dataset.tail()

# As shown last 'n' days of dataset is NaN(Empty) So in next we'll remove it

# First we create own independent dataset (X)
# Convert dataset into numpy array
X = np.array(dataset.drop(['prediction'],1))
# Remove last n Rows who is NaN
X = X[:-forecast_out]

X

X.shape

# First we have (1472)Rows and Now we have (1442)Rows 
# We Took forecast_out = 30 so thats why last 30 rows was NaN and we removed it

# Now we creating Dependent Variable (y)
# Convert dataset into numpy array
y = np.array(dataset['prediction'])
# Get all values eccept last 'n' rows
y = y[:-forecast_out]

y

# Split data into 80% training and 20% testing
from sklearn.model_selection import train_test_split
X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.2)

X_train

X_train.shape

# 1153 is 80% of 1442 so it's sucessfully splited

"""# Creating Model 
### Support vector regressor
"""

from sklearn.svm import SVR # Importing SVR
model = SVR(kernel='rbf',gamma=0.1,C=1e3) # Create object of SVR
model.fit(X_train,y_train) # Fitting dataset Into it

# Now test the model as return score coefficient
# Best possible score is 1.0
confidence = model.score(X_test,y_test)

confidence

# we got 0.9858 it's very nearest to 1

"""### Creating another model 
### Random Forest Regressor
"""

from sklearn.ensemble import RandomForestRegressor
modelR = RandomForestRegressor(n_estimators=300,random_state=0)
modelR.fit(X_train,y_train)

# Now test the model as return score coefficient of Random Forest
# Best possible score is 1.0
confidenceR = modelR.score(X_test,y_test)

confidenceR

# we got 0.9827 it's also very nearest to 1
# We can see that SVR is More good than Random Forest

"""# Now we'll predicting the dataset of stock market"""

# set X_forecast equals to last 30 rows of the orihnal dataset from Adj. Close which we removed because of forecast_out
X_forecast = np.array(dataset.drop(['prediction'],1))[-forecast_out:]
y_forecast = np.array(dataset['prediction'])[-forecast_out:]

X_forecast

y_forecast

actual= np.array(dataset['Adj. Close'][1442:])

actual

# print the prediction of the next 'n' days
prediction_SVR = model.predict(X_forecast) # For SVR Model
print(prediction_SVR)
prediction_RF = modelR.predict(X_forecast) # For Random Forest
print(prediction_RF)

"""# Visualization"""

plt.figure(figsize=(10,6))
#plt.scatter(X_forecast,y_forecast,color='red')
plt.plot(prediction_SVR,color='blue')
plt.plot(prediction_RF,color='red')
plt.plot(actual,color='green')

# Here is Last 30 Dataset Visualization which we predicted
''' 
Here Green color is actual price of closing share
Here Red color is Predicted price of closing share using Supoort Vector Regression
Here Blue color is Predicted price of closing share using random forest Regression 

'''